Práce s poli
************

.[perex]
Tato stránka se věnuje třídám [Nette\Utils\Arrays|#Arrays], [#ArrayHash] a [#ArrayList], které se týkají polí.


Instalace:

```shell
composer require nette/utils
```


Arrays
======

[api:Nette\Utils\Arrays] je statická třída obsahující užitečné funkce pro práci s poli.

Následující příklady předpokládají vytvořený alias:

```php
use Nette\Utils\Arrays;
```


flatten(array $array, bool $preserveKeys=FALSE): array .[method]
----------------------------------------------------------------

Sjednotí víceúrovňové pole do plochého.

```php
$array = Arrays::flatten(array(1, 2, array(3, 4, array(5, 6))));
// $array = array(1, 2, 3, 4, 5, 6);
```


get(array $array, string|int|array $key, mixed $default=NULL): mixed .[method]
------------------------------------------------------------------------------

Vrací prvek `$array[$key]`. Pokud neexistuje, vyhodí buď výjimku `Nette\InvalidArgumentException`, nebo je-li uveden třetí parametr `$default`, vrátí ten.

```php
// pokud $array['foo'] neexistuje, vyhodí výjimku
$value = Arrays::get($array, 'foo');

// pokud $array['foo'] neexistuje, vrátí 'bar'
$value = Arrays::get($array, 'foo', 'bar');
```

Klíčem `$key` může být i pole.

```php
$array = array('color' => array('favorite' => 'red'), 5);

$value = Arrays::get($array, array('color', 'favorite'));
// vrátí 'red'
```


getRef(array &$array, string|int|array $key): mixed .[method]
-------------------------------------------------------------

Získá referenci na zadaný prvek pole. Pokud prvek neexistuje, bude vytvořen s hodnotou NULL.

```php
$valueRef = & Arrays::getRef($array, 'foo');
// vrátí referenci na $array['foo']
```

Stejně jako funkce [#get()] umí pracovat s vícerozměrnými poli.

```php
$value = & Arrays::getRef($array, array('color', 'favorite'));
// vrátí referenci na $array['color']['favorite']
```


grep(array $array, string $pattern, int $flags=NULL): array .[method]
---------------------------------------------------------------------

Vrátí pouze ty prvky pole, jejichž hodnota odpovídá regulárnímu výrazu `$pattern`. Chyba při kompilaci nebo zpracování výrazu vyhodí výjimku `Nette\RegexpException`.

```php
$filteredArray = Arrays::grep($array, '~^\d+$~');
// vrátí pouze prvky pole tvořené číslicemi
```

Jako příznak `$flags` můžeme uvést konstantu `PREG_GREP_INVERT`, což invertuje výběr.


insertAfter(array &$array, string|int $key, array $inserted): void .[method]
----------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` hned za prvek s klíčem `$key`. Pokud klíč v poli není, vkládá se na konec.

```php
$array = array('first' => 10, 'second' => 20);
Arrays::insertAfter($array, 'first', array('hello' => 'world'));
// $array = array('first' => 10, 'hello' => 'world', 'second' => 20);
```


insertBefore(array &$array, string|int $key, array $inserted): void .[method]
-----------------------------------------------------------------------------

Vloží obsah pole `$inserted` do pole `$array` před prvek s klíčem `$key`. Pokud klíč v poli není, vloží se na začátek.

```php
$array = array('first' => 10, 'second' => 20);
Arrays::insertBefore($array, 'first', array('hello' => 'world'));
// $array = array('hello' => 'world', 'first' => 10, 'second' => 20);
```


mergeTree(array $array1, array $array2): array .[method]
--------------------------------------------------------

Rekurzivně sloučí dvě pole. Hodí se například ke slučování stromových struktur. Při slučování se řídí stejnými pravidly jako operátor&nbsp;`+` aplikovaný na pole, tj. k prvnímu poli přidává dvojice klíč/hodnota z druhého pole a v případě kolize klíčů ponechá hodnotu z prvního pole.

```php
$array1 = array('color' => array('favorite' => 'red'), 5);
$array2 = array(10, 'color' => array('favorite' => 'green', 'blue'));

$array = Arrays::mergeTree($array1, $array2);
// $array = array('color' => array('favorite' => 'red', 'blue'), 5);
```

Hodnoty z druhého pole jsou vždy přidány na konec prvního. Jako trošku matoucí se může zdát zmizení hodnoty `10` z druhého pole. Je třeba si uvědomit, že tato hodnota a stejně tak hodnota `5` v poli prvním mají přiřazený stejný numerický klíč `0`, proto ve výsledném poli je jen prvek z prvního pole.


normalize(array $array, string $filling=NULL): array .[method]
--------------------------------------------------------------

Normalizuje pole na asociativní pole. Numerické klíče nahradí jejich hodnotami, novou hodnotou bude `$filling`.

```php
$array = Arrays::normalize(array(1 => 'first', 'a' => 'second'));
// $array = array('first' => NULL, 'a' => 'second');
```

```php
$array = Arrays::normalize(array(1 => 'first', 'a' => 'second'), 'foobar');
// $array = array('first' => 'foobar', 'a' => 'second');
```


pick(array &$array, string|int $key, mixed $default=NULL): mixed .[method]
--------------------------------------------------------------------------

Vrátí a odstraní hodnotu prvku z pole. Pokud neexistuje, vyhodí výjimku, nebo vrátí hodnotu `$default`, pokud je uvedena.

```php
$array = array(1 => 'foo', NULL => 'bar');
$a = Arrays::pick($array, NULL);
// $a = 'bar'
$b = Arrays::pick($array, 'not-exists', 'foobar');
// $b = 'foobar'
$c = Arrays::pick($array, 'not-exists');
// throws Nette\InvalidArgumentException
```


renameKey(array &$array, string|int $oldKey, string|int $newKey): void .[method]
--------------------------------------------------------------------------------

Přejmenuje klíč v poli.

```php
$array = array('first' => 10, 'second' => 20);
Arrays::renameKey($array, 'first', 'renamed');
// $array = array('renamed' => 10, 'second' => 20);
```


searchKey(array $array, string|int $key) .[method]
--------------------------------------------------

Vrátí pozici daného klíče v poli. Pozice je číslována od 0. V případě, že klíč nebude nalezen, vrátí funkce `FALSE`.

```php
$array = array('first' => 10, 'second' => 20);
$position = Arrays::searchKey($array, 'first'); // vrátí 0
```


ArrayHash
=========

Objekt [api:Nette\Utils\ArrayHash] je potomkem generické třídy stdClass a rozšiřuje jej o schopnost zacházet s ním jako s polem, tedy například přistupovat ke členům přes hranaté závorky:

```php
$hash = new Nette\Utils\ArrayHash;
$hash['foo'] = 123;
$hash->bar = 456; // zároveň funguje i objektový zápis
$hash->foo; // 123
```

Lze používat funkci `count()` a nad objektem iterovat, stejně jako v případě pole:

```php
count($hash); // 2

foreach ($hash as $key => $value) ...
```

Existující pole můžeme tranformovat na `ArrayHash` metodou `from()`:

```php
$array = array('foo' => 123, 'bar' => 456);

$hash = Nette\Utils\ArrayHash::from($array);
$hash->foo; // 123
$hash->bar; // 456
```

Převod je rekurzivní:

```php
$array = array('foo' => 123, 'inner' => array('a' => 'b'));

$hash = Nette\Utils\ArrayHash::from($array);
$hash->inner; // objekt ArrayHash
$hash->inner->a; // 'b'
$hash['inner']['a']; // 'b'
```

Tomu lze zabránit druhým parametrem:

```php
$hash = Nette\Utils\ArrayHash::from($array, FALSE);
$hash->inner; // pole
```

Transformace zpátky na pole:

```php
$array = (array) $hash;
```


ArrayList
=========

[api:Nette\Utils\ArrayList] představuje lineární pole, kde indexy jsou pouze celá čísla vzestupně od 0.

```php
$list = new Nette\Utils\ArrayList;
$list[] = 'a';
$list[] = 'b';
$list[] = 'c';
// ArrayList(0 => 'a', 1 => 'b', 2 => 'c')
count($list); // 3
```

Nad objektem lze iterovat nebo volat `count()`, stejně jako v případě pole.

Přístup ke klíčům mimo povolené hodnoty vyhodí výjimku `Nette\OutOfRangeException`:

```php
echo $list[-1]; // vyhodí Nette\OutOfRangeException
unset($list[30]); // vyhodí Nette\OutOfRangeException
```

Odstranění klíče způsobí přečíslování prvků:

```php
unset($list[1]);
// ArrayList(0 => 'a', 1 => 'c')
```


{{composer: nette/utils}}
